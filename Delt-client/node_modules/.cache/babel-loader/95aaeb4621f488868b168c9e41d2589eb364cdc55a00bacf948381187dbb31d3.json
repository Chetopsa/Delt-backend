{"ast":null,"code":"import React,{useLayoutEffect,useState}from'react';import{Outlet,Navigate,useLocation}from\"react-router-dom\";import{requestAuth}from'./requestAuth';import{jsx as _jsx}from\"react/jsx-runtime\";function ProtectedRoutes(){const location=useLocation();// for checking admin routes\nconst[validated,setValidated]=useState([]);const[admin,setAdmin]=useState([]);// const {validated} = useValidation();\n// console.log(\"protected routes \" + validated);\n// // Handle loading state if validation is still being checked\n// if (validated === null) {\n//     return <div>Loading...</div>; // replace with loading ui\n// }\n// console.log(\"validated value right after declaration:  \" + validated);\nuseLayoutEffect(()=>{(async()=>{const isValidated=await requestAuth();// console.log(\"isValidated: \" + isValidated);\nsetValidated(isValidated.authorized);setAdmin(isValidated.isAdmin);})();},[]);// console.log(\"is validated a truthy?: \" + (validated == true));\nconst isAdminRoute=location.pathname.startsWith('/admin');// console.log(\"is admin route: \" + isAdminRoute);\nif(!validated){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\"});}if(isAdminRoute&&!admin){return/*#__PURE__*/_jsx(Navigate,{to:\"/unauthorized\"});}return/*#__PURE__*/_jsx(Outlet,{});}export default ProtectedRoutes;","map":{"version":3,"names":["React","useLayoutEffect","useState","Outlet","Navigate","useLocation","requestAuth","jsx","_jsx","ProtectedRoutes","location","validated","setValidated","admin","setAdmin","isValidated","authorized","isAdmin","isAdminRoute","pathname","startsWith","to"],"sources":["/Users/chestonopsasnick/Documents/Coding_Projects/Delt-backend/Delt-client/src/utils/ProtectedRoutes.js"],"sourcesContent":["import React, {useLayoutEffect, useState} from 'react'\nimport { Outlet, Navigate, useLocation  } from \"react-router-dom\";\nimport { requestAuth } from './requestAuth';\n\nfunction ProtectedRoutes() {\n    const location = useLocation(); // for checking admin routes\n\n    const [validated, setValidated] = useState([]);\n    const [admin, setAdmin] = useState([]);\n    // const {validated} = useValidation();\n    // console.log(\"protected routes \" + validated);\n    // // Handle loading state if validation is still being checked\n\n    // if (validated === null) {\n    //     return <div>Loading...</div>; // replace with loading ui\n    // }\n    \n    // console.log(\"validated value right after declaration:  \" + validated);\n    useLayoutEffect(() => {\n        (async () => {\n            const isValidated = await requestAuth();\n            // console.log(\"isValidated: \" + isValidated);\n            setValidated(isValidated.authorized);\n            setAdmin(isValidated.isAdmin);\n        })();\n    }, []);\n   \n    // console.log(\"is validated a truthy?: \" + (validated == true));\n    const isAdminRoute = location.pathname.startsWith('/admin');\n    // console.log(\"is admin route: \" + isAdminRoute);\n\n    if (!validated) {\n        return <Navigate to=\"/login\"/>;\n    }\n    if (isAdminRoute && !admin) {\n        return <Navigate to=\"/unauthorized\"/>;\n    }\n    return <Outlet/>;\n}\nexport default ProtectedRoutes"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,eAAe,CAAEC,QAAQ,KAAO,OAAO,CACtD,OAASC,MAAM,CAAEC,QAAQ,CAAEC,WAAW,KAAS,kBAAkB,CACjE,OAASC,WAAW,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,QAAS,CAAAC,eAAeA,CAAA,CAAG,CACvB,KAAM,CAAAC,QAAQ,CAAGL,WAAW,CAAC,CAAC,CAAE;AAEhC,KAAM,CAACM,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CACtC;AACA;AACA;AAEA;AACA;AACA;AAEA;AACAD,eAAe,CAAC,IAAM,CAClB,CAAC,SAAY,CACT,KAAM,CAAAc,WAAW,CAAG,KAAM,CAAAT,WAAW,CAAC,CAAC,CACvC;AACAM,YAAY,CAACG,WAAW,CAACC,UAAU,CAAC,CACpCF,QAAQ,CAACC,WAAW,CAACE,OAAO,CAAC,CACjC,CAAC,EAAE,CAAC,CACR,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAC,YAAY,CAAGR,QAAQ,CAACS,QAAQ,CAACC,UAAU,CAAC,QAAQ,CAAC,CAC3D;AAEA,GAAI,CAACT,SAAS,CAAE,CACZ,mBAAOH,IAAA,CAACJ,QAAQ,EAACiB,EAAE,CAAC,QAAQ,CAAC,CAAC,CAClC,CACA,GAAIH,YAAY,EAAI,CAACL,KAAK,CAAE,CACxB,mBAAOL,IAAA,CAACJ,QAAQ,EAACiB,EAAE,CAAC,eAAe,CAAC,CAAC,CACzC,CACA,mBAAOb,IAAA,CAACL,MAAM,GAAC,CAAC,CACpB,CACA,cAAe,CAAAM,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}